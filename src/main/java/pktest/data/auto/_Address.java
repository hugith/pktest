package pktest.data.auto;

import pktest.data.Address;
import pktest.data.Person;

import org.apache.cayenne.CayenneDataObject;

import org.apache.cayenne.ObjectContext;
import org.apache.cayenne.exp.Expression;
import org.apache.cayenne.query.Ordering;
import org.apache.cayenne.query.SelectQuery;

import org.apache.cayenne.exp.Property;

/**
 * Class _Address was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Address extends CayenneDataObject {

    public static final String ENTITY_NAME = "Address";

    public static final Property<java.lang.String> NAME = Property.create( "name", java.lang.String.class );
    public static final Property<pktest.data.Person> PERSON = Property.create( "person", pktest.data.Person.class );

    public static final String ID_PK_COLUMN = "id";

	public static Address createAddress(ObjectContext oc
	) {
		Address result = new Address();
		oc.registerNewObject(result);
		return result;
	}
	
    public void setName(String name) {
        writeProperty("name", name);
    }
    public String name() {
        return (String)readProperty("name");
    }

    public void setPerson(Person person) {
        setToOneTarget("person", person, true);
    }
    public Person createPersonRelationship() {
        Person obj = getObjectContext().newObject(Person.class);
        setToOneTarget("person", obj, true);
        return obj;
    }

    public Person person() {
        return (Person)readProperty("person");
    }



	@SuppressWarnings("unchecked")
	public static java.util.List<Address> fetchAll( ObjectContext oc ) {
		SelectQuery<Address> q = new SelectQuery<>( Address.class );
  		return oc.performQuery( q );
 	}
 	
	@SuppressWarnings("unchecked")
 	public static java.util.List<Address> fetch( ObjectContext oc, Expression expression ) {
  		SelectQuery<Address> q = new SelectQuery<>( Address.class, expression );
  		return oc.performQuery( q );
 	}

	@SuppressWarnings("unchecked")
 	public static java.util.List<Address> fetch( ObjectContext oc, Expression expression, java.util.List<Ordering> orderings ) {
  		SelectQuery<Address> q = new SelectQuery<>( Address.class, expression );

  		if ( orderings != null ) {
   			for( Ordering ordering : orderings ) {
    			q.addOrdering( ordering );
   			}
  		}

  		return oc.performQuery( q );
 	}
 	
 	@SuppressWarnings("unchecked")
 	public static java.util.List<Address> fetchAll( ObjectContext oc, java.util.List<Ordering> orderings ) {
  		SelectQuery<Address> q = new SelectQuery<>( Address.class);

  		if ( orderings != null ) {
   			for( Ordering ordering : orderings ) {
    			q.addOrdering( ordering );
   			}
  		}

  		return oc.performQuery( q );
 	}
 	
 	
	public static Address fetchOne(ObjectContext oc, Expression expression) {
		java.util.List<Address> objects = fetch(oc, expression);
		Address obj;
		int count = objects.size();
		if (count == 0) {
			obj = null;
		} else if (count == 1) {
			obj = objects.get(0);
		} else {
			throw new IllegalStateException("There was more than one Address that matched the qualifier '" + expression + "'.");
		}
		return obj;
	}
}